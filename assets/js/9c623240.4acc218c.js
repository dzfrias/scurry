"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8903],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=o.createContext({}),p=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=p(e.components);return o.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,f=u["".concat(s,".").concat(m)]||u[m]||d[m]||a;return n?o.createElement(f,i(i({ref:t},c),{},{components:n})):o.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<a;p++)i[p]=n[p];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},3327:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>p});var o=n(7462),r=(n(7294),n(3905));const a={sidebar_position:7},i="Components",l={unversionedId:"tutorial-basics/components",id:"tutorial-basics/components",title:"Components",description:"Components are one of the main parts of Scurry that make it unique.",source:"@site/docs/tutorial-basics/components.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/components",permalink:"/docs/tutorial-basics/components",draft:!1,tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7},sidebar:"tutorialSidebar",previous:{title:"Import Statements",permalink:"/docs/tutorial-basics/import"},next:{title:"Code Style",permalink:"/docs/tutorial-basics/style"}},s={},p=[{value:"Declaring a Component",id:"declaring-a-component",level:2},{value:"Fields",id:"fields",level:2},{value:"Methods",id:"methods",level:2},{value:"Extra",id:"extra",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"components"},"Components"),(0,r.kt)("p",null,"Components are one of the main parts of Scurry that make it unique."),(0,r.kt)("p",null,'Components are similar to objects in other languages (they are the "object" in\n"object-oriented programming").'),(0,r.kt)("p",null,"Much like other languages, they allow state to be grouped together combined with\nbehavior."),(0,r.kt)("p",null,"Instances are modeled after Python classes, so users familiar with that should\nfeel right at home!"),(0,r.kt)("h2",{id:"declaring-a-component"},"Declaring a Component"),(0,r.kt)("p",null,"In order to make a component use the ",(0,r.kt)("inlineCode",{parentName:"p"},"decl")," keyword."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"decl MyComponent {}\n\n// To make an instance, use function call syntax.\ninstance = MyComponent();\n")),(0,r.kt)("p",null,"For now, instance can do almost nothing. However, it can be compared with other\ninstances out of the gate!"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"println(instance == MyComponent());\n")),(0,r.kt)("p",null,"This program prints ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),"."),(0,r.kt)("h2",{id:"fields"},"Fields"),(0,r.kt)("p",null,"In order to allow state add state to this object, Scurry has fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"decl MyComponent {\n   field1,\n   field2\n}\n")),(0,r.kt)("p",null,"Now, when an instance of MyComponent is made, it will be initialized with two\nfields: ",(0,r.kt)("inlineCode",{parentName:"p"},"field1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"field2"),". These fields default to ",(0,r.kt)("inlineCode",{parentName:"p"},"Nil"),"."),(0,r.kt)("p",null,"If you try assigning to a field that hasn't been declared yet, an error is\nthrown."),(0,r.kt)("h2",{id:"methods"},"Methods"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"instance = MyComponent();\nprintln(instance.field1);\n")),(0,r.kt)("p",null,"This actually fails! Fields cannot be directly read or written so a method needs\nto be added in order to actually use these fields."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"decl MyComponent {\n   field1,\n   field2,\n\n   exp fn get_field1(self) {\n      return self.field1;\n   }\n}\n")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"exp")," here denotes a public method. Methods are private by default."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"instance = MyComponent();\nprintln(instance.get_field1());\n")),(0,r.kt)("p",null,"This program works, and prints ",(0,r.kt)("inlineCode",{parentName:"p"},"Nil"),"."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MyComponent")," is still pretty useless. In order to assign values to fields when\nan instance of ",(0,r.kt)("inlineCode",{parentName:"p"},"MyComponent")," is created, use the ",(0,r.kt)("inlineCode",{parentName:"p"},"$new")," method."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"decl MyComponent {\n   field1,\n   field2,\n\n   fn $new(self, field) {\n      self.field1 = field;\n      self.field2 = 5;\n   }\n\n   exp fn get_field(self) {\n      return self.field1 + self.field2;\n   }\n}\n\ninstance = MyComponent(33);\nprintln(instance.get_field());\n")),(0,r.kt)("p",null,"Now this actually has some functionality!"),(0,r.kt)("h2",{id:"extra"},"Extra"),(0,r.kt)("p",null,"With this knowledge, you should be able to write nice object-oriented code!\nHowever, one of Scurry's distinguishing features is it's emphasis on component\ndesign."),(0,r.kt)("p",null,"On that note, a more advanced look at components is available here."))}d.isMDXComponent=!0}}]);