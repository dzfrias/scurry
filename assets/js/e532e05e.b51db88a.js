"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[302],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},y=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),y=c(n),d=a,m=y["".concat(l,".").concat(d)]||y[d]||u[d]||i;return n?r.createElement(m,o(o({ref:t},p),{},{components:n})):r.createElement(m,o({ref:t},p))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=y;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}y.displayName="MDXCreateElement"},3118:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const i={sidebar_position:5},o="Functions",s={unversionedId:"tutorial-basics/functions",id:"tutorial-basics/functions",title:"Functions",description:"Functions in Scurry are similar to other languages, but have some features that make dynamic typing not as frustrating.",source:"@site/docs/tutorial-basics/functions.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/functions",permalink:"/scurry/docs/tutorial-basics/functions",draft:!1,tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"Switch Statements",permalink:"/scurry/docs/tutorial-basics/switch"},next:{title:"Import Statements",permalink:"/scurry/docs/tutorial-basics/import"}},l={},c=[{value:"The Basics",id:"the-basics",level:2},{value:"Typing",id:"typing",level:2},{value:"Type Checks",id:"type-checks",level:3}],p={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"functions"},"Functions"),(0,a.kt)("p",null,"Functions in Scurry are similar to other languages, but have some features that make dynamic typing not as frustrating."),(0,a.kt)("h2",{id:"the-basics"},"The Basics"),(0,a.kt)("p",null,"A function can be declared like this:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fn add(x, y) {\n   return x + y;\n}\n")),(0,a.kt)("p",null,"Functions can be called with the call syntax, ",(0,a.kt)("inlineCode",{parentName:"p"},"()"),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"println(add(1, 2));\n")),(0,a.kt)("p",null,"As you might expect, this prints ",(0,a.kt)("inlineCode",{parentName:"p"},"3"),"."),(0,a.kt)("h2",{id:"typing"},"Typing"),(0,a.kt)("p",null,"While this model ",(0,a.kt)("em",{parentName:"p"},"works"),", if someone passed in ",(0,a.kt)("strong",{parentName:"p"},"anything")," of the wrong type, ",(0,a.kt)("strong",{parentName:"p"},"any"),"\ngiven function might crash with an unhelpful error message. This is downside\nshared throughout all dynamically typed languages."),(0,a.kt)("p",null,"To make this less annoying, Scurry supports type annotations."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"fn add(x: Int, y: Int) > Int {\n   return x + y;\n}\n")),(0,a.kt)("p",null,"This function now clearly accepts two integers, and returns an ",(0,a.kt)("inlineCode",{parentName:"p"},"Int"),"."),(0,a.kt)("h3",{id:"type-checks"},"Type Checks"),(0,a.kt)("p",null,"Additionally, Scurry allows for type checks ",(0,a.kt)("strong",{parentName:"p"},"at runtime"),", which is very\nhelpful for demystifying error messages."),(0,a.kt)("p",null,"Simply add an ",(0,a.kt)("inlineCode",{parentName:"p"},"!")," to any function call and the types of the supplied arguments\nwill be checked when the function is called."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},'fn add(x: Int, y: Int) {\n   return x + y;\n}\n\nadd("String", 22)!;\n')),(0,a.kt)("p",null,"Give this program a run! Instead of throwing an error at ",(0,a.kt)("inlineCode",{parentName:"p"},"x + y"),", Scurry instead\ntells you exactly what types were mismatched!"),(0,a.kt)("p",null,"By using type annotations and type checks frequently in your functions, you can\ncreate relatively type-safe programs!"))}u.isMDXComponent=!0}}]);