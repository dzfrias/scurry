"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[906],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>y});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function o(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),m=u(r),y=a,d=m["".concat(s,".").concat(y)]||m[y]||c[y]||i;return r?n.createElement(d,l(l({ref:t},p),{},{components:r})):n.createElement(d,l({ref:t},p))}));function y(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var u=2;u<i;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8076:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>c,frontMatter:()=>i,metadata:()=>o,toc:()=>u});var n=r(7462),a=(r(7294),r(3905));const i={sidebar_position:1},l="Introductory Syntax",o={unversionedId:"tutorial-basics/basics",id:"tutorial-basics/basics",title:"Introductory Syntax",description:"This section quickly covers standard syntax in Scurry.",source:"@site/docs/tutorial-basics/basics.md",sourceDirName:"tutorial-basics",slug:"/tutorial-basics/basics",permalink:"/scurry/docs/tutorial-basics/basics",draft:!1,tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"The Basics",permalink:"/scurry/docs/category/the-basics"},next:{title:"If Statements",permalink:"/scurry/docs/tutorial-basics/if_stmt"}},s={},u=[{value:"Operators",id:"operators",level:2},{value:"Literals",id:"literals",level:2},{value:"Assignment",id:"assignment",level:2}],p={toc:u};function c(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"introductory-syntax"},"Introductory Syntax"),(0,a.kt)("p",null,"This section quickly covers standard syntax in Scurry."),(0,a.kt)("p",null,"Semicolons are ",(0,a.kt)("strong",{parentName:"p"},"not")," optional. Scurry uses curly-brace syntax consistently\nfor just about everything in the language."),(0,a.kt)("h2",{id:"operators"},"Operators"),(0,a.kt)("p",null,"Almost ",(0,a.kt)("strong",{parentName:"p"},"every")," standard operator, save maybe bitwise operators, makes an\nappearance in Scurry. Just play around in the REPL and see what's possible!"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">> 1 + 1;\n2\n\n>> True == False;\nFalse\n\n>> 5.3 >= 2;\nTrue\n\n>> True || False;\nTrue\n")),(0,a.kt)("h2",{id:"literals"},"Literals"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"/scurry/docs/tutorial-basics/types/int"},"Int")," and ",(0,a.kt)("a",{parentName:"li",href:"/scurry/docs/tutorial-basics/types/float"},"Float")," literals, you can\n",(0,a.kt)("em",{parentName:"li"},"probably")," guess how to declare them",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},"No hexadecimal literals"),(0,a.kt)("li",{parentName:"ul"},"No binary literals"),(0,a.kt)("li",{parentName:"ul"},"No ",(0,a.kt)("inlineCode",{parentName:"li"},"_")," in numbers"))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"String")," literals, only double quotes allowed",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"This is a string!"')))),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"True")," for ",(0,a.kt)("a",{parentName:"li",href:"/scurry/docs/tutorial-basics/types/bool"},"boolean")," true"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"False")," for ",(0,a.kt)("a",{parentName:"li",href:"/scurry/docs/tutorial-basics/types/bool"},"boolean")," false"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"Nil")," for null"),(0,a.kt)("li",{parentName:"ul"},"Brackets for ",(0,a.kt)("inlineCode",{parentName:"li"},"Array")," literals. Arrays are dynamically sized",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"[1, 2, 3, Nil]")))),(0,a.kt)("li",{parentName:"ul"},"Curly braces for ",(0,a.kt)("inlineCode",{parentName:"li"},"Map")," literals. ",(0,a.kt)("inlineCode",{parentName:"li"},"Map"),"s are similar to Python dictionaries.",(0,a.kt)("ul",{parentName:"li"},(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'{"hello": 42, 10: 3.3}'))))),(0,a.kt)("h2",{id:"assignment"},"Assignment"),(0,a.kt)("p",null,"Variables are assigned with no more than an ",(0,a.kt)("inlineCode",{parentName:"p"},"="),"."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},">> pi = 3.14159265358979;\n\n>> pi;\n3.14159265358979\n\n>> x = 3;\n\n>> x /= 3;\n\n>> x;\n1\n\n>> y;\nvariable not found: y on line 1\n")),(0,a.kt)("p",null,"Again, play around in the REPL with everything learned. This stuff is pretty\nself-explanatory but some more complicated elements of Scurry are best learned\nthrough experimentation."))}c.isMDXComponent=!0}}]);